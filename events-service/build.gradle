plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.viktorkuts.events'
version = '1.0.0-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	mapstructVersion = "1.5.3.Final"
	lombokVersion = "1.18.26"
	lombokMapstructBindingVersion = "0.2.0"
}

jacoco{
	toolVersion = "0.8.11"
}

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.11.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
}

//jacocoTestReport{
//	dependsOn test
//
//	afterEvaluate {
//		classDirectories.setFrom(files(classDirectories.files.collect {
//			fileTree(dir: it, exclude: [])
//		}))
//	}
//}
//
//jacocoTestCoverageVerification {
//	violationRules {
//		rule {
//			limit {
//				minimum = 0.4
//			}
//		}
//	}
//}

//test.finalizedBy jacocoTestReport
//check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
	useJUnitPlatform()
//	testLogging {
//		events "passed", "skipped", "failed"
//	}
}
